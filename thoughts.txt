27/6

-> setup github account.
-> brainstorm architecture

view
login
sign up
normal user , cvm user (authorization)


normal user story :

1. one time signup, cvm users recieve request. gives rights
2. signs in.
3. Home screen has cards 
    -> run campaign.
    -> blacklist.
    -> view my campaigns.

cvm user story : 

1. sign up one time.
2. logs in.
3. Home screen has cards. 
    -> run campaign.
    -> blacklist.
    -> view campaigns. (based on filters)
        -> time.
        -> user.
        -> offer name.
        -> campaign name.


models:

    -> user
        :> name string
        :> email string
        :> password string
        :> td_user string
        :> td_password string
        :> td_name string
        :> creation_time timestamp
        :> user_type enum (cvm_type , non_cvm_type)
    -> criteria
        :> location.
        :> cells.
        :> regions.
        :> 
    -> campaign
        :> name string
        :> execution_date_time time
        => reference to base


add capping on campaigns count


a campaign can run on multiple bases


CVM rights

-> crud users.
-> view all campaigns (from all users).
-> view all bases.
-> bulk calander upload.
-> blacklist a number.



RUN CAMPAIGN FLOW  for both CVM and NON-CVM

signup
login
home screen  (select run campaign card)
screen with (All bases)   select a base or create a base or select multiple bases
lock bases.
create campaign.  (screen with the whole campaign form and submit request for non cvm, execute for cvm).



Insert INTO dp_tmp.adhoc_bulk_data(campaign_id,msisdn,gcg_flag,sms_text,broadcast_Date,masking,stakeholder,sms_type,sms_priority,campaign_name,service_code,channel,time_stamp)
select
distinct 100 as CAMPAIGN_ID,
B.msisdn MSISDN,
0 as GCG_FLAG,
b.message,
DATE+1 BROADCAST_DATE,
'Jazz' as MASKING,
'adhoc' ,
1,
1,
'Postpaid',
'adhoc',
'SMS',
CURRENT_TIMESTAMP
from  TABLE_NAME as B
where b.MSISDN NOT IN
(select distinct access_method_num from DP_DIT.Blacklist_CVM)





title               string
BROADCAST_DATE      DATE
MASKING             enum [Jazz , JAZZ]
stakeholder         enum['adhoc' , 'ADHOC']
time_stamp          timestamp
campaign_name       enum ['Postpaid' , 'Prepaid']
channel             enum ['SMS' , 'CALL']
TABLE_NAME          string
base_list           [string]
status              enum ['In Progress' , 'Executed']


steps :

1. Establish campaign crud
2. Establish campaign execute()
3. Establish campaign park()


DP_TMP.Jazzer is the destination table;





user can not make more than ten bases
upon addiition using the above check we can limit the bases


masking checks based on user type
urdu input
disallow bad words
apply capping on campaign
super adminm
adminm
user



team governs the rights, the capping.



***********************************************************************

                        list of goals for Jazzer

************************************************************************


    1. user can signup.
    2. user can login.
    3. user can see all bases (acc to roles)
    4. user can create a base.
    5. user can view a base. (acc to roles)
    6. user can see all campaigns (acc to roles)
    7. user can create a campaign.
    8. user can park request to TL (admin) for approval.
    9. user can view a campaign. (acc to roles)


    What are the attrubutes of a team?
    => name    string
    => shortCode   string
    => team_id   string       
    => team member ids [string]
    => stakeholder options [string]
    => masking options [string]

    create team                                         (only superAdmin)
    update team                                         (only admin)
    remove from team                                    (admin , superAdmin)
    add to team                                         (admin , superAdmin)
    delete team                                         (only superAdmin)
    get all teams                                       (only superAdmin)
    read team  
    add/remove stakeholder options                      (only admin)
    add/remove masking options                          (only admin)
    create admin for team (cvm_type)                    (only superAdmin)
    change team lead                                    (only superAdmin)


later on make team a required field in user












